// To avoid duplicates conflicting
var jQueryUrvanovSyntaxHighlighter = jQuery;

(function ($) {

    UrvanovSyntaxHighlighterUtil = new function () {

        var base = this;
        var settings = null;

        base.init = function () {
            settings = UrvanovSyntaxHighlighterSyntaxSettings;
            base.initGET();
        };

        base.addPrefixToID = function (id) {
            return id.replace(/^([#.])?(.*)$/, '$1' + settings.prefix + '$2');
        };

        base.removePrefixFromID = function (id) {
            var re = new RegExp('^[#.]?' + settings.prefix, 'i');
            return id.replace(re, '');
        };

        base.cssElem = function (id) {
            return $(base.addPrefixToID(id));
        };

        base.setDefault = function (v, d) {
            return (typeof v == 'undefined') ? d : v;
        };

        base.setMax = function (v, max) {
            return v <= max ? v : max;
        };

        base.setMin = function (v, min) {
            return v >= min ? v : min;
        };

        base.setRange = function (v, min, max) {
            return base.setMax(base.setMin(v, min), max);
        };

        base.getExt = function (str) {
            if (str.indexOf('.') == -1) {
                return undefined;
            }
            var ext = str.split('.');
            if (ext.length) {
                ext = ext[ext.length - 1];
            } else {
                ext = '';
            }
            return ext;
        };

        base.initGET = function () {
            // URLs
            window.currentURL = window.location.protocol + '//' + window.location.host + window.location.pathname;
            window.currentDir = window.currentURL.substring(0, window.currentURL.lastIndexOf('/'));

            // http://stackoverflow.com/questions/439463
            function getQueryParams(qs) {
                qs = qs.split("+").join(" ");
                var params = {}, tokens, re = /[?&]?([^=]+)=([^&]*)/g;
                while (tokens = re.exec(qs)) {
                    params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
                }
                return params;
            }

            window.GET = getQueryParams(document.location.search);
        };

        base.getAJAX = function (args, callback) {
            args.version = settings.version;
            $.get(settings.ajaxurl, args, callback);
        };
        
        /**
         * @param {String} HTML representing any number of sibling elements
         * @return {NodeList} 
         */
        base.htmlToElements = function (html) {
            return $.parseHTML(html, document, true);
        }


        base.postAJAX = function (args, callback) {
            args.version = settings.version;
            $.post(settings.ajaxurl, args, callback);
        };

        base.reload = function () {
            var get = '?';
            for (var i in window.GET) {
                get += i + '=' + window.GET[i] + '&';
            }
            window.location = window.currentURL + get;
        };

        base.escape = function (string) {
            if (typeof encodeURIComponent == 'function') {
                return encodeURIComponent(string);
            } else if (typeof escape != 'function') {
                return escape(string);
            } else {
                return string;
            }
        };

        base.log = function (string) {
            if (typeof console != 'undefined' && settings && settings.debug) {
                console.log(string);
            }
        };

        base.decode_html = function (str) {
            return String(str).replace(/&lt;/g, '<').replace(
                /&gt;/g, '>').replace(/&amp;/g, '&');
        };

        base.encode_html = function (str) {
            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(
                />/g, '&gt;');
        };

        /**
         * Returns either black or white to ensure this color is distinguishable with the given RGB hex.
         * This function can be used to create a readable foreground color given a background color, or vice versa.
         * It forms a radius around white where black is returned. Outside this radius, white is returned.
         *
         * @param hex An RGB hex (e.g. "#FFFFFF")
         * @requires jQuery and TinyColor
         * @param args The argument object. Properties:
         *      amount: a value in the range [0,1]. If the distance of the given hex from white exceeds this value,
         *          white is returned. Otherwise, black is returned.
         *      xMulti: a multiplier to the distance in the x-axis.
         *      yMulti: a multiplier to the distance in the y-axis.
         *      normalizeHue: either falsey or an [x,y] array range. If hex is a colour with hue in this range,
         *          then normalizeHueXMulti and normalizeHueYMulti are applied.
         *      normalizeHueXMulti: a multiplier to the distance in the x-axis if hue is normalized.
         *      normalizeHueYMulti: a multiplier to the distance in the y-axis if hue is normalized.
         * @return the RGB hex string of black or white.
         */
        base.getReadableColor = function (hex, args) {
            args = $.extend({
                amount: 0.5,
                xMulti: 1,
                // We want to achieve white a bit sooner in the y axis
                yMulti: 1.5,
                normalizeHue: [20, 180],
                // For colors that appear lighter (yellow, green, light blue) we reduce the distance in the x direction,
                // stretching the radius in the x axis allowing more black than before.
                normalizeHueXMulti: 1 / 2.5,
                normalizeHueYMulti: 1
            }, args);
            var color = tinycolor(hex);
            var hsv = color.toHsv();
            // Origin is white
            var coord = {x: hsv.s, y: 1 - hsv.v};
            // Multipliers
            coord.x *= args.xMulti;
            coord.y *= args.yMulti;
            if (args.normalizeHue && hsv.h > args.normalizeHue[0] && hsv.h < args.normalizeHue[1]) {
                coord.x *= args.normalizeHueXMulti;
                coord.y *= args.normalizeHueYMulti;
            }
            var dist = Math.sqrt(Math.pow(coord.x, 2) + Math.pow(coord.y, 2));
            if (dist < args.amount) {
                hsv.v = 0; // black
            } else {
                hsv.v = 1; // white
            }
            hsv.s = 0;
            return tinycolor(hsv).toHexString();
        };

        base.removeChars = function (chars, str) {
            var re = new RegExp('[' + chars + ']', 'gmi');
            return str.replace(re, '');
        }

    };

    $(document).ready(function () {
        UrvanovSyntaxHighlighterUtil.init();
    });

    // http://stackoverflow.com/questions/2360655/jquery-event-handlers-always-execute-in-order-they-were-bound-any-way-around-t

    // [name] is the name of the event "click", "mouseover", ..
    // same as you'd pass it to bind()
    // [fn] is the handler function
    $.fn.bindFirst = function (name, fn) {
        // bind as you normally would
        // don't want to miss out on any jQuery magic
        this.bind(name, fn);
        // Thanks to a comment by @Martin, adding support for
        // namespaced events too.
        var handlers = this.data('events')[name.split('.')[0]];
        // take out the handler we just inserted from the end
        var handler = handlers.pop();
        // move it at the beginning
        handlers.splice(0, 0, handler);
    };

    // http://stackoverflow.com/questions/4079274/how-to-get-an-objects-properties-in-javascript-jquery
    $.keys = function (obj) {
        var keys = [];
        for (var key in obj) {
            keys.push(key);
        }
        return keys;
    }

    // Prototype modifications

    RegExp.prototype.execAll = function (string) {
        var matches = [];
        var match = null;
        while ((match = this.exec(string)) != null) {
            var matchArray = [];
            for (var i in match) {
                if (parseInt(i) == i) {
                    matchArray.push(match[i]);
                }
            }
            matches.push(matchArray);
        }
        return matches;
    };

    // Escape regex chars with \
    RegExp.prototype.escape = function (text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };

    String.prototype.sliceReplace = function (start, end, repl) {
        return this.substring(0, start) + repl + this.substring(end);
    };

    String.prototype.escape = function () {
        var tagsToReplace = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;'
        };
        return this.replace(/[&<>]/g, function (tag) {
            return tagsToReplace[tag] || tag;
        });
    };

    String.prototype.linkify = function (target) {
        target = typeof target != 'undefined' ? target : '';
        return this.replace(/(http(s)?:\/\/(\S)+)/gmi, '<a href="$1" target="' + target + '">$1</a>');
    };

    String.prototype.toTitleCase = function () {
        var parts = this.split(/\s+/);
        var title = '';
        $.each(parts, function (i, part) {
            if (part != '') {
                title += part.slice(0, 1).toUpperCase() + part.slice(1, part.length);
                if (i != parts.length - 1 && parts[i + 1] != '') {
                    title += ' ';
                }
            }
        });
        return title;
    };

})(jQueryUrvanovSyntaxHighlighter);
// Default Settings
jqueryPopup = Object();
jqueryPopup.defaultSettings = {
		centerBrowser:0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left
		centerScreen:0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left
		height:500, // sets the height in pixels of the window.
		left:0, // left position when the window appears.
		location:0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.
		menubar:0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.
		resizable:0, // whether the window can be resized {1 (YES) or 0 (NO)}. Can also be overloaded using resizable.
		scrollbars:0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.
		status:0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.
		width:500, // sets the width in pixels of the window.
		windowName:null, // name of window set from the name attribute of the element that invokes the click
		windowURL:null, // url used for the popup
		top:0, // top position when the window appears.
		toolbar:0, // determines whether a toolbar (includes the forward and back buttons) is displayed {1 (YES) or 0 (NO)}.
		data:null,
		event:'click'
	};

(function ($) {

	popupWindow = function (object, instanceSettings, beforeCallback, afterCallback) {
		beforeCallback = typeof beforeCallback !== 'undefined' ? beforeCallback : null;
		afterCallback = typeof afterCallback !== 'undefined' ? afterCallback : null;
	
		if (typeof object == 'string') {
			object = jQuery(object);
		}
		if (!(object instanceof jQuery)) {
			return false;
		}
		var settings = jQuery.extend({}, jqueryPopup.defaultSettings, instanceSettings || {});
		object.handler = jQuery(object).bind(settings.event, function() {
			
			if (beforeCallback) {
				beforeCallback();
			}
			
			var windowFeatures =    'height=' + settings.height +
									',width=' + settings.width +
									',toolbar=' + settings.toolbar +
									',scrollbars=' + settings.scrollbars +
									',status=' + settings.status + 
									',resizable=' + settings.resizable +
									',location=' + settings.location +
									',menuBar=' + settings.menubar;
		
			settings.windowName = settings.windowName || jQuery(this).attr('name');
			var href = jQuery(this).attr('href');
			if (!settings.windowURL && !(href == '#') && !(href == '')) {
				settings.windowURL = jQuery(this).attr('href');
			}
			
			var centeredY,centeredX;
			
			var win = null;
			if (settings.centerBrowser) {
				if (typeof window.screenY == 'undefined') {// not defined for old IE versions
					centeredY = (window.screenTop - 120) + ((((document.documentElement.clientHeight + 120)/2) - (settings.height/2)));
					centeredX = window.screenLeft + ((((document.body.offsetWidth + 20)/2) - (settings.width/2)));
				} else {
					centeredY = window.screenY + (((window.outerHeight/2) - (settings.height/2)));
					centeredX = window.screenX + (((window.outerWidth/2) - (settings.width/2)));
				}
				win = window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + centeredX +',top=' + centeredY);
			} else if (settings.centerScreen) {
				centeredY = (screen.height - settings.height)/2;
				centeredX = (screen.width - settings.width)/2;
				win = window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + centeredX +',top=' + centeredY);
			} else {
				win = window.open(settings.windowURL, settings.windowName, windowFeatures+',left=' + settings.left +',top=' + settings.top);
			}
			if (win != null) {
				win.focus();
				if (settings.data) {
					win.document.write(settings.data);
				}
			}
			
			if (afterCallback) {
				afterCallback();
			}
		});
		return settings;
	};

	popdownWindow = function(object, event) {
		if (typeof event == 'undefined') {
			event = 'click';
		}
		object = jQuery(object);
		if (!(object instanceof jQuery)) {
			return false;
		}
		object.unbind(event, object.handler);
	};

})(jQueryUrvanovSyntaxHighlighter);

// Urvanov Syntax Highlighter JavaScript

(function ($) {


	
    // BEGIN AUXILIARY FUNCTIONS

    $.fn.exists = function () {
        return this.length !== 0;
    };

    $.fn.style = function (styleName, value, priority) {
        // DOM node
        var node = this.get(0);
        // Ensure we have a DOM node
        if (typeof node == 'undefined') {
            return;
        }
        // CSSStyleDeclaration
        var style = node.style;
        // Getter/Setter
        if (typeof styleName != 'undefined') {
            if (typeof value != 'undefined') {
                // Set style property
                priority = typeof priority != 'undefined' ? priority : '';
                if (typeof style.setProperty != 'undefined') {
                    style.setProperty(styleName, value, priority);
                } else {
                    // XXX Using priority breaks on IE 7 & 8
//                    if (priority) {
//                        value = value + ' !' + priority;
//                    }
                    style[styleName] = value;
                }
            } else {
                // Get style property
                return style[styleName];
            }
        } else {
            // Get CSSStyleDeclaration
            return style;
        }
    };

    // END AUXILIARY FUNCTIONS

    var PRESSED = 'crayon-pressed';
    var UNPRESSED = '';

    var URVANOV_SYNTAX_HIGHLIGHTER_SYNTAX = 'div.urvanov-syntax-highlighter-syntax';
    var URVANOV_SYNTAX_HIGHLIGHTER_TOOLBAR = '.crayon-toolbar';
    var URVANOV_SYNTAX_HIGHLIGHTER_INFO = '.crayon-info';
    var URVANOV_SYNTAX_HIGHLIGHTER_PLAIN = '.urvanov-syntax-highlighter-plain';
    var URVANOV_SYNTAX_HIGHLIGHTER_MAIN = '.urvanov-syntax-highlighter-main';
    var URVANOV_SYNTAX_HIGHLIGHTER_TABLE = '.crayon-table';
    var URVANOV_SYNTAX_HIGHLIGHTER_LOADING = '.urvanov-syntax-highlighter-loading';
    var URVANOV_SYNTAX_HIGHLIGHTER_CODE = '.urvanov-syntax-highlighter-code';
    var URVANOV_SYNTAX_HIGHLIGHTER_TITLE = '.crayon-title';
    var URVANOV_SYNTAX_HIGHLIGHTER_TOOLS = '.crayon-tools';
    var URVANOV_SYNTAX_HIGHLIGHTER_NUMS = '.crayon-nums';
    var URVANOV_SYNTAX_HIGHLIGHTER_NUM = '.crayon-num';
    var URVANOV_SYNTAX_HIGHLIGHTER_LINE = '.crayon-line';
    var URVANOV_SYNTAX_HIGHLIGHTER_WRAPPED = 'urvanov-syntax-highlighter-wrapped';
    var URVANOV_SYNTAX_HIGHLIGHTER_NUMS_CONTENT = '.urvanov-syntax-highlighter-nums-content';
    var URVANOV_SYNTAX_HIGHLIGHTER_NUMS_BUTTON = '.urvanov-syntax-highlighter-nums-button';
    var URVANOV_SYNTAX_HIGHLIGHTER_WRAP_BUTTON = '.urvanov-syntax-highlighter-wrap-button';
    var URVANOV_SYNTAX_HIGHLIGHTER_EXPAND_BUTTON = '.urvanov-syntax-highlighter-expand-button';
    var URVANOV_SYNTAX_HIGHLIGHTER_EXPANDED = 'urvanov-syntax-highlighter-expanded urvanov-syntax-highlighter-toolbar-visible';
    var URVANOV_SYNTAX_HIGHLIGHTER_PLACEHOLDER = 'urvanov-syntax-highlighter-placeholder';
    var URVANOV_SYNTAX_HIGHLIGHTER_POPUP_BUTTON = '.urvanov-syntax-highlighter-popup-button';
    var URVANOV_SYNTAX_HIGHLIGHTER_COPY_BUTTON = '.urvanov-syntax-highlighter-copy-button';
    var URVANOV_SYNTAX_HIGHLIGHTER_PLAIN_BUTTON = '.urvanov-syntax-highlighter-plain-button';

    UrvanovSyntaxHighlighterSyntax = new function () {
        var base = this;
        var urvanov_syntax_highlighters = new Object();
        var settings;
        var strings;
        var currUID = 0;
        var touchscreen;

        base.init = function () {
            if (typeof urvanov_syntax_highlighters == 'undefined') {
                urvanov_syntax_highlighters = new Object();
            }
            settings = UrvanovSyntaxHighlighterSyntaxSettings;
            strings = UrvanovSyntaxHighlighterSyntaxStrings;
            $(URVANOV_SYNTAX_HIGHLIGHTER_SYNTAX).each(function () {
                base.process(this);
            });
        };

        base.process = function (c, replace) {
            c = $(c);
            var uid = c.attr('id');
            if (uid == 'urvanov-syntax-highlighter-') {
                // No ID, generate one
                uid += getUID();
            }
            c.attr('id', uid);
            UrvanovSyntaxHighlighterUtil.log(uid);

            if (typeof replace == 'undefined') {
                replace = false;
            }

            if (!replace && !makeUID(uid)) {
                // Already a UrvanovSyntaxHighlighter
                return;
            }

            var toolbar = c.find(URVANOV_SYNTAX_HIGHLIGHTER_TOOLBAR);
            var info = c.find(URVANOV_SYNTAX_HIGHLIGHTER_INFO);
            var plain = c.find(URVANOV_SYNTAX_HIGHLIGHTER_PLAIN);
            var main = c.find(URVANOV_SYNTAX_HIGHLIGHTER_MAIN);
            var table = c.find(URVANOV_SYNTAX_HIGHLIGHTER_TABLE);
            var code = c.find(URVANOV_SYNTAX_HIGHLIGHTER_CODE);
            var title = c.find(URVANOV_SYNTAX_HIGHLIGHTER_TITLE);
            var tools = c.find(URVANOV_SYNTAX_HIGHLIGHTER_TOOLS);
            var nums = c.find(URVANOV_SYNTAX_HIGHLIGHTER_NUMS);
            var numsContent = c.find(URVANOV_SYNTAX_HIGHLIGHTER_NUMS_CONTENT);
            var numsButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_NUMS_BUTTON);
            var wrapButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_WRAP_BUTTON);
            var expandButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_EXPAND_BUTTON);
            var popupButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_POPUP_BUTTON);
            var copyButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_COPY_BUTTON);
            var plainButton = c.find(URVANOV_SYNTAX_HIGHLIGHTER_PLAIN_BUTTON);

            urvanov_syntax_highlighters[uid] = c;
            urvanov_syntax_highlighters[uid].toolbar = toolbar;
            urvanov_syntax_highlighters[uid].plain = plain;
            urvanov_syntax_highlighters[uid].info = info;
            urvanov_syntax_highlighters[uid].main = main;
            urvanov_syntax_highlighters[uid].table = table;
            urvanov_syntax_highlighters[uid].code = code;
            urvanov_syntax_highlighters[uid].title = title;
            urvanov_syntax_highlighters[uid].tools = tools;
            urvanov_syntax_highlighters[uid].nums = nums;
            urvanov_syntax_highlighters[uid].nums_content = numsContent;
            urvanov_syntax_highlighters[uid].numsButton = numsButton;
            urvanov_syntax_highlighters[uid].wrapButton = wrapButton;
            urvanov_syntax_highlighters[uid].expandButton = expandButton;
            urvanov_syntax_highlighters[uid].popup_button = popupButton;
            urvanov_syntax_highlighters[uid].copy_button = copyButton;
            urvanov_syntax_highlighters[uid].plainButton = plainButton;
            urvanov_syntax_highlighters[uid].numsVisible = true;
            urvanov_syntax_highlighters[uid].wrapped = false;
            urvanov_syntax_highlighters[uid].plainVisible = false;

            urvanov_syntax_highlighters[uid].toolbar_delay = 0;
            urvanov_syntax_highlighters[uid].time = 1;

            // Set plain
            $(URVANOV_SYNTAX_HIGHLIGHTER_PLAIN).css('z-index', 0);

            // XXX Remember CSS dimensions
            var mainStyle = main.style();
            urvanov_syntax_highlighters[uid].mainStyle = {
                'height': mainStyle && mainStyle.height || '',
                'max-height': mainStyle && mainStyle.maxHeight || '',
                'min-height': mainStyle && mainStyle.minHeight || '',
                'width': mainStyle && mainStyle.width || '',
                'max-width': mainStyle && mainStyle.maxWidth || '',
                'min-width': mainStyle && mainStyle.minWidth || ''
            };
            urvanov_syntax_highlighters[uid].mainHeightAuto = urvanov_syntax_highlighters[uid].mainStyle.height == '' && urvanov_syntax_highlighters[uid].mainStyle['max-height'] == '';

            var load_timer;
            var i = 0;
            urvanov_syntax_highlighters[uid].loading = true;
            urvanov_syntax_highlighters[uid].scrollBlockFix = false;

            // Register click events
            numsButton.click(function () {
                UrvanovSyntaxHighlighterSyntax.toggleNums(uid);
            });
            wrapButton.click(function () {
                UrvanovSyntaxHighlighterSyntax.toggleWrap(uid);
            });
            expandButton.click(function () {
                UrvanovSyntaxHighlighterSyntax.toggleExpand(uid);
            });
            plainButton.click(function () {
                UrvanovSyntaxHighlighterSyntax.togglePlain(uid);
            });
            copyButton.click(function () {
                UrvanovSyntaxHighlighterSyntax.copyPlain(uid);
            });

            // Enable retina if supported
            retina(uid);

            var load_func = function () {
                // If nums hidden by default
                if (nums.filter('[data-settings~="hide"]').length != 0) {
                    numsContent.ready(function () {
                        UrvanovSyntaxHighlighterUtil.log('function' + uid);
                        UrvanovSyntaxHighlighterSyntax.toggleNums(uid, true, true);
                    });
                } else {
                    updateNumsButton(uid);
                }

                if (typeof urvanov_syntax_highlighters[uid].expanded == 'undefined') {
                    // Determine if we should enable code expanding toggling
                    if (Math.abs(urvanov_syntax_highlighters[uid].main.outerWidth() - urvanov_syntax_highlighters[uid].table.outerWidth()) < 10) {
                        urvanov_syntax_highlighters[uid].expandButton.hide();
                    } else {
                        urvanov_syntax_highlighters[uid].expandButton.show();
                    }
                }

                // TODO If width has changed or timeout, stop timer
                if (/*last_num_width != nums.outerWidth() ||*/ i == 5) {
                    clearInterval(load_timer);
                    //urvanov_syntax_highlighters[uid].removeClass(URVANOV_SYNTAX_HIGHLIGHTER_LOADING);
                    urvanov_syntax_highlighters[uid].loading = false;
                }
                i++;
            };
            load_timer = setInterval(load_func, 300);
            fixScrollBlank(uid);

            // Add ref to num for each line
            $(URVANOV_SYNTAX_HIGHLIGHTER_NUM, urvanov_syntax_highlighters[uid]).each(function () {
                var lineID = $(this).attr('data-line');
                var line = $('#' + lineID);
                var height = line.style('height');
                if (height) {
                    line.attr('data-height', height);
                }
            });

            // Used for toggling
            main.css('position', 'relative');
            main.css('z-index', 1);

            // Disable certain features for touchscreen devices
            touchscreen = (c.filter('[data-settings~="touchscreen"]').length != 0);

            // Used to hide info
            if (!touchscreen) {
                main.click(function () {
                    urvanovSyntaxHighlighterInfo(uid, '', false);
                });
                plain.click(function () {
                    urvanovSyntaxHighlighterInfo(uid, '', false);
                });
                info.click(function () {
                    urvanovSyntaxHighlighterInfo(uid, '', false);
                });
            }

            // Used for code popup
            if (c.filter('[data-settings~="no-popup"]').length == 0) {
                urvanov_syntax_highlighters[uid].popup_settings = popupWindow(popupButton, {
                    height: screen.height - 200,
                    width: screen.width - 100,
                    top: 75,
                    left: 50,
                    scrollbars: 1,
                    windowURL: '',
                    data: '' // Data overrides URL
                }, function () {
                    codePopup(uid);
                }, function () {
                    //UrvanovSyntaxHighlighterUtil.log('after');
                });
            }

            plain.css('opacity', 0);

            urvanov_syntax_highlighters[uid].toolbarVisible = true;
            urvanov_syntax_highlighters[uid].hasOneLine = table.outerHeight() < toolbar.outerHeight() * 2;
            urvanov_syntax_highlighters[uid].toolbarMouseover = false;
            // If a toolbar with mouseover was found
            if (toolbar.filter('[data-settings~="mouseover"]').length != 0 && !touchscreen) {
                urvanov_syntax_highlighters[uid].toolbarMouseover = true;
                urvanov_syntax_highlighters[uid].toolbarVisible = false;

                toolbar.css('margin-top', '-' + toolbar.outerHeight() + 'px');
                toolbar.hide();
                // Overlay the toolbar if needed, only if doing so will not hide the
                // whole code!
                if (toolbar.filter('[data-settings~="overlay"]').length != 0
                    && !urvanov_syntax_highlighters[uid].hasOneLine) {
                    toolbar.css('position', 'absolute');
                    toolbar.css('z-index', 2);
                    // Hide on single click when overlayed
                    if (toolbar.filter('[data-settings~="hide"]').length != 0) {
                        main.click(function () {
                            toggleToolbar(uid, undefined, undefined, 0);
                        });
                        plain.click(function () {
                            toggleToolbar(uid, false, undefined, 0);
                        });
                    }
                } else {
                    toolbar.css('z-index', 4);
                }
                // Enable delay on mouseout
                if (toolbar.filter('[data-settings~="delay"]').length != 0) {
                    urvanov_syntax_highlighters[uid].toolbar_delay = 500;
                }
                // Use .hover() for chrome, but in firefox mouseover/mouseout worked best
                c.mouseenter(function () {
                    toggleToolbar(uid, true);
                })
                    .mouseleave(function () {
                        toggleToolbar(uid, false);
                    });
            } else if (touchscreen) {
                toolbar.show();
            }

            // Minimize
            if (c.filter('[data-settings~="minimize"]').length == 0) {
                base.minimize(uid);
            }

            // Plain show events
            if (plain.length != 0 && !touchscreen) {
                if (plain.filter('[data-settings~="dblclick"]').length != 0) {
                    main.dblclick(function () {
                        UrvanovSyntaxHighlighterSyntax.togglePlain(uid);
                    });
                } else if (plain.filter('[data-settings~="click"]').length != 0) {
                    main.click(function () {
                        UrvanovSyntaxHighlighterSyntax.togglePlain(uid);
                    });
                } else if (plain.filter('[data-settings~="mouseover"]').length != 0) {
                    c.mouseenter(function () {
                        UrvanovSyntaxHighlighterSyntax.togglePlain(uid, true);
                    })
                        .mouseleave(function () {
                            UrvanovSyntaxHighlighterSyntax.togglePlain(uid, false);
                        });
                    numsButton.hide();
                }
                if (plain.filter('[data-settings~="show-plain-default"]').length != 0) {
                    // XXX
                    UrvanovSyntaxHighlighterSyntax.togglePlain(uid, true);
                }
            }

            // Scrollbar show events
            var expand = c.filter('[data-settings~="expand"]').length != 0;
//            urvanov_syntax_highlighters[uid].mouse_expand = expand;
            if (!touchscreen && c.filter('[data-settings~="scroll-mouseover"]').length != 0) {
                // Disable on touchscreen devices and when set to mouseover
                main.css('overflow', 'hidden');
                plain.css('overflow', 'hidden');
                c.mouseenter(function () {
                    toggle_scroll(uid, true, expand);
                })
                .mouseleave(function () {
                    toggle_scroll(uid, false, expand);
                });
            }

            if (expand) {
                c.mouseenter(function () {
                    toggleExpand(uid, true);
                })
                    .mouseleave(function () {
                        toggleExpand(uid, false);
                    });
            }

            // Disable animations
            if (c.filter('[data-settings~="disable-anim"]').length != 0) {
                urvanov_syntax_highlighters[uid].time = 0;
            }

            // Wrap
            if (c.filter('[data-settings~="wrap"]').length != 0) {
                urvanov_syntax_highlighters[uid].wrapped = true;
            }

            // Determine if Mac
            urvanov_syntax_highlighters[uid].mac = c.hasClass('urvanov-syntax-highlighter-os-mac');

            // Update clickable buttons
            updateNumsButton(uid);
            updatePlainButton(uid);
            updateWrap(uid);
        };

        var makeUID = function (uid) {
            UrvanovSyntaxHighlighterUtil.log(urvanov_syntax_highlighters);
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                urvanov_syntax_highlighters[uid] = $('#' + uid);
                UrvanovSyntaxHighlighterUtil.log('make ' + uid);
                return true;
            }

            UrvanovSyntaxHighlighterUtil.log('no make ' + uid);
            return false;
        };

        var getUID = function () {
            return currUID++;
        };

        var codePopup = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }
            var settings = urvanov_syntax_highlighters[uid].popup_settings;
            if (settings && settings.data) {
                // Already done
                return;
            }

            var clone = urvanov_syntax_highlighters[uid].clone(true);
            clone.removeClass('urvanov-syntax-highlighter-wrapped');

            // Unwrap
            if (urvanov_syntax_highlighters[uid].wrapped) {
                $(URVANOV_SYNTAX_HIGHLIGHTER_NUM, clone).each(function () {
                    var line_id = $(this).attr('data-line');
                    var line = $('#' + line_id);
                    var height = line.attr('data-height');
                    height = height ? height : '';
                    if (typeof height != 'undefined') {
                        line.css('height', height);
                        $(this).css('height', height);
                    }
                });
            }
            clone.find(URVANOV_SYNTAX_HIGHLIGHTER_MAIN).css('height', '');

            var code = '';
            if (urvanov_syntax_highlighters[uid].plainVisible) {
                code = clone.find(URVANOV_SYNTAX_HIGHLIGHTER_PLAIN);
            } else {
                code = clone.find(URVANOV_SYNTAX_HIGHLIGHTER_MAIN);
            }

            settings.data = base.getAllCSS() + '<body class="urvanov-syntax-highlighter-popup-window" style="padding:0; margin:0;"><div class="' + clone.attr('class') +
                ' urvanov-syntax-highlighter-popup">' + base.removeCssInline(base.getHtmlString(code)) + '</div></body>';
        };

        base.minimize = function (uid) {
            var button = $('<div class="urvanov-syntax-highlighter-minimize urvanov-syntax-highlighter-button"><div>');
            urvanov_syntax_highlighters[uid].tools.append(button);
            // TODO translate
            urvanov_syntax_highlighters[uid].origTitle = urvanov_syntax_highlighters[uid].title.html();
            if (!urvanov_syntax_highlighters[uid].origTitle) {
                urvanov_syntax_highlighters[uid].title.html(strings.minimize);
            };
            var cls = 'urvanov-syntax-highlighter-minimized';
            var show = function () {
                urvanov_syntax_highlighters[uid].toolbarPreventHide = false;
                button.remove();
                urvanov_syntax_highlighters[uid].removeClass(cls);
                urvanov_syntax_highlighters[uid].title.html(urvanov_syntax_highlighters[uid].origTitle);
                var toolbar = urvanov_syntax_highlighters[uid].toolbar;
                if (toolbar.filter('[data-settings~="never-show"]').length != 0) {
                    toolbar.remove();
                }
            };
            urvanov_syntax_highlighters[uid].toolbar.click(show);
            button.click(show);
            urvanov_syntax_highlighters[uid].addClass(cls);
            urvanov_syntax_highlighters[uid].toolbarPreventHide = true;
            toggleToolbar(uid, undefined, undefined, 0);
        }

        base.getHtmlString = function (object) {
            return $('<div>').append(object.clone()).remove().html();
        };

        base.removeCssInline = function (string) {
            var reStyle = /style\s*=\s*"([^"]+)"/gmi;
            var match = null;
            while ((match = reStyle.exec(string)) != null) {
                var repl = match[1];
                repl = repl.replace(/\b(?:width|height)\s*:[^;]+;/gmi, '');
                string = string.sliceReplace(match.index, match.index + match[0].length, 'style="' + repl + '"');
            }
            return string;
        };

        // Get all CSS on the page as a string
        base.getAllCSS = function () {
            var css_str = '';
            var css = $('link[rel="stylesheet"]');
            var filtered = [];
            if (css.length == 1) {
                // For minified CSS, only allow a single file
                filtered = css;
            } else {
                // Filter all others for UrvanovSyntaxHighlighter CSS
                filtered = css.filter('[href*="urvanov-syntax-highlighter"], [href*="min/"]');
            }
            filtered.each(function () {
                var string = base.getHtmlString($(this));
                css_str += string;
            });
            return css_str;
        };

        base.copyPlain = function (uid, hover) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }

            var plain = urvanov_syntax_highlighters[uid].plain;
            
            var plainTextCode = plain[0].value;

            navigator.clipboard.writeText(plainTextCode)
                .then(value => urvanovSyntaxHighlighterInfo(uid, strings.copy));
            return false;
        };

        var urvanovSyntaxHighlighterInfo = function (uid, text, show) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }

            var info = urvanov_syntax_highlighters[uid].info;

            if (typeof text == 'undefined') {
                text = '';
            }
            if (typeof show == 'undefined') {
                show = true;
            }

            if (isSlideHidden(info) && show) {
                info.html('<div>' + text + '</div>');
                info.css('margin-top', -info.outerHeight());
                info.show();
                urvanovSyntaxHighlighterSlide(uid, info, true);
                setTimeout(function () {
                    urvanovSyntaxHighlighterSlide(uid, info, false);
                }, 5000);
            }

            if (!show) {
                urvanovSyntaxHighlighterSlide(uid, info, false);
            }

        };

        var retina = function (uid) {
            if (window.devicePixelRatio > 1) {
                var buttons = $('.urvanov-syntax-highlighter-button-icon', urvanov_syntax_highlighters[uid].toolbar);
                buttons.each(function () {
                    var lowres = $(this).css('background-image');
                    var highres = lowres.replace(/\.(?=[^\.]+$)/g, '@2x.');
                    $(this).css('background-size', '48px 128px');
                    $(this).css('background-image', highres);
                });
            }
        };

        var isSlideHidden = function (object) {
            var object_neg_height = '-' + object.outerHeight() + 'px';
            if (object.css('margin-top') == object_neg_height || object.css('display') == 'none') {
                return true;
            } else {
                return false;
            }
        };

        var urvanovSyntaxHighlighterSlide = function (uid, object, show, animTime, hideDelay, callback) {
            var complete = function () {
                if (callback) {
                    callback(uid, object);
                }
            }
            var objectNegHeight = '-' + object.outerHeight() + 'px';

            if (typeof show == 'undefined') {
                if (isSlideHidden(object)) {
                    show = true;
                } else {
                    show = false;
                }
            }
            // Instant means no time delay for showing/hiding
            if (typeof animTime == 'undefined') {
                animTime = 100;
            }
            if (animTime == false) {
                animTime = false;
            }
            if (typeof hideDelay == 'undefined') {
                hideDelay = 0;
            }
            object.stop(true);
            if (show == true) {
                object.show();
                object.animate({
                    marginTop: 0
                }, animt(animTime, uid), complete);
            } else if (show == false) {
                // Delay if fully visible
                if (/*instant == false && */object.css('margin-top') == '0px' && hideDelay) {
                    object.delay(hideDelay);
                }
                object.animate({
                    marginTop: objectNegHeight
                }, animt(animTime, uid), function () {
                    object.hide();
                    complete();
                });
            }
        };

        base.togglePlain = function (uid, hover, select) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }

            var main = urvanov_syntax_highlighters[uid].main;
            var plain = urvanov_syntax_highlighters[uid].plain;

            if ((main.is(':animated') || plain.is(':animated')) && typeof hover == 'undefined') {
                return;
            }

            reconsileDimensions(uid);

            var visible, hidden;
            if (typeof hover != 'undefined') {
                if (hover) {
                    visible = main;
                    hidden = plain;
                } else {
                    visible = plain;
                    hidden = main;
                }
            } else {
                if (main.css('z-index') == 1) {
                    visible = main;
                    hidden = plain;
                } else {
                    visible = plain;
                    hidden = main;
                }
            }

            urvanov_syntax_highlighters[uid].plainVisible = (hidden == plain);

            // Remember scroll positions of visible
            urvanov_syntax_highlighters[uid].top = visible.scrollTop();
            urvanov_syntax_highlighters[uid].left = visible.scrollLeft();

            /* Used to detect a change in overflow when the mouse moves out
             * of the UrvanovSyntaxHighlighter. If it does, then overflow has already been changed,
             * no need to revert it after toggling plain. */
            urvanov_syntax_highlighters[uid].scrollChanged = false;

            // Hide scrollbars during toggle to avoid Chrome weird draw error
            // visible.css('overflow', 'hidden');
            // hidden.css('overflow', 'hidden');

            fixScrollBlank(uid);

            // Show hidden, hide visible
            visible.stop(true);
            visible.fadeTo(animt(500, uid), 0,
                function () {
                    visible.css('z-index', 0);
                });
            hidden.stop(true);
            hidden.fadeTo(animt(500, uid), 1,
                function () {
                    hidden.css('z-index', 1);
                    // Give focus to plain code
                    if (hidden == plain) {
                        if (select) {
                            plain.select();
                        } else {
                            // XXX not needed
                            // plain.focus();
                        }
                    }

                    // Refresh scrollbar draw
                    hidden.scrollTop(urvanov_syntax_highlighters[uid].top + 1);
                    hidden.scrollTop(urvanov_syntax_highlighters[uid].top);
                    hidden.scrollLeft(urvanov_syntax_highlighters[uid].left + 1);
                    hidden.scrollLeft(urvanov_syntax_highlighters[uid].left);
                });

            // Restore scroll positions to hidden
            hidden.scrollTop(urvanov_syntax_highlighters[uid].top);
            hidden.scrollLeft(urvanov_syntax_highlighters[uid].left);

            updatePlainButton(uid);

            // Hide toolbar if possible
            toggleToolbar(uid, false);
            return false;
        };

        base.toggleNums = function (uid, hide, instant) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                makeUID(uid);
                return false;
            }

            if (urvanov_syntax_highlighters[uid].table.is(':animated')) {
                return false;
            }
            var numsWidth = Math.round(urvanov_syntax_highlighters[uid].nums_content.outerWidth() + 1);
            var negWidth = '-' + numsWidth + 'px';

            // Force hiding
            var numHidden;
            if (typeof hide != 'undefined') {
                numHidden = false;
            } else {
                // Check hiding
                numHidden = (urvanov_syntax_highlighters[uid].table.css('margin-left') == negWidth);
            }

            var numMargin;
            if (numHidden) {
                // Show
                numMargin = '0px';
                urvanov_syntax_highlighters[uid].numsVisible = true;
            } else {
                // Hide
                urvanov_syntax_highlighters[uid].table.css('margin-left', '0px');
                urvanov_syntax_highlighters[uid].numsVisible = false;
                numMargin = negWidth;
            }

            if (typeof instant != 'undefined') {
                urvanov_syntax_highlighters[uid].table.css('margin-left', numMargin);
                updateNumsButton(uid);
                return false;
            }

            // Stop jerking animation from scrollbar appearing for a split second due to
            // change in width. Prevents scrollbar disappearing if already visible.
            var h_scroll_visible = (urvanov_syntax_highlighters[uid].table.outerWidth() + pxToInt(urvanov_syntax_highlighters[uid].table.css('margin-left')) > urvanov_syntax_highlighters[uid].main.outerWidth());
            var v_scroll_visible = (urvanov_syntax_highlighters[uid].table.outerHeight() > urvanov_syntax_highlighters[uid].main.outerHeight());
            if (!h_scroll_visible && !v_scroll_visible) {
                urvanov_syntax_highlighters[uid].main.css('overflow', 'hidden');
            }
            urvanov_syntax_highlighters[uid].table.animate({
                marginLeft: numMargin
            }, animt(200, uid), function () {
                if (typeof urvanov_syntax_highlighters[uid] != 'undefined') {
                    updateNumsButton(uid);
                    if (!h_scroll_visible && !v_scroll_visible) {
                        urvanov_syntax_highlighters[uid].main.css('overflow', 'auto');
                    }
                }
            });
            return false;
        };

        base.toggleWrap = function (uid) {
            urvanov_syntax_highlighters[uid].wrapped = !urvanov_syntax_highlighters[uid].wrapped;
            updateWrap(uid);
        };

        base.toggleExpand = function (uid) {
            var expand = !UrvanovSyntaxHighlighterUtil.setDefault(urvanov_syntax_highlighters[uid].expanded, false);
            toggleExpand(uid, expand);
        };

        var updateWrap = function (uid, restore) {
            restore = UrvanovSyntaxHighlighterUtil.setDefault(restore, true);
            if (urvanov_syntax_highlighters[uid].wrapped) {
                urvanov_syntax_highlighters[uid].addClass(URVANOV_SYNTAX_HIGHLIGHTER_WRAPPED);
            } else {
                urvanov_syntax_highlighters[uid].removeClass(URVANOV_SYNTAX_HIGHLIGHTER_WRAPPED);
            }
            updateWrapButton(uid);
            if (!urvanov_syntax_highlighters[uid].expanded && restore) {
                restoreDimensions(uid);
            }
            urvanov_syntax_highlighters[uid].wrapTimes = 0;
            clearInterval(urvanov_syntax_highlighters[uid].wrapTimer);
            urvanov_syntax_highlighters[uid].wrapTimer = setInterval(function () {
                if (urvanov_syntax_highlighters[uid].is(':visible')) {
                    // XXX if hidden the height can't be determined
                    reconsileLines(uid);
                    urvanov_syntax_highlighters[uid].wrapTimes++;
                    if (urvanov_syntax_highlighters[uid].wrapTimes == 5) {
                        clearInterval(urvanov_syntax_highlighters[uid].wrapTimer);
                    }
                }
            }, 200);
        };

        var fixTableWidth = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                makeUID(uid);
                return false;
            }
        };

        // Convert '-10px' to -10
        var pxToInt = function (pixels) {
            if (typeof pixels != 'string') {
                return 0;
            }
            var result = pixels.replace(/[^-0-9]/g, '');
            if (result.length == 0) {
                return 0;
            } else {
                return parseInt(result);
            }
        };

        var updateNumsButton = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined' || typeof urvanov_syntax_highlighters[uid].numsVisible == 'undefined') {
                return;
            }
            if (urvanov_syntax_highlighters[uid].numsVisible) {
                urvanov_syntax_highlighters[uid].numsButton.removeClass(UNPRESSED);
                urvanov_syntax_highlighters[uid].numsButton.addClass(PRESSED);
            } else {
                // TODO doesn't work on iPhone
                urvanov_syntax_highlighters[uid].numsButton.removeClass(PRESSED);
                urvanov_syntax_highlighters[uid].numsButton.addClass(UNPRESSED);
            }
        };

        var updateWrapButton = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined' || typeof urvanov_syntax_highlighters[uid].wrapped == 'undefined') {
                return;
            }
            if (urvanov_syntax_highlighters[uid].wrapped) {
                urvanov_syntax_highlighters[uid].wrapButton.removeClass(UNPRESSED);
                urvanov_syntax_highlighters[uid].wrapButton.addClass(PRESSED);
            } else {
                // TODO doesn't work on iPhone
                urvanov_syntax_highlighters[uid].wrapButton.removeClass(PRESSED);
                urvanov_syntax_highlighters[uid].wrapButton.addClass(UNPRESSED);
            }
        };

        var updateExpandButton = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined' || typeof urvanov_syntax_highlighters[uid].expanded == 'undefined') {
                return;
            }

            if (urvanov_syntax_highlighters[uid].expanded) {
                urvanov_syntax_highlighters[uid].expandButton.removeClass(UNPRESSED);
                urvanov_syntax_highlighters[uid].expandButton.addClass(PRESSED);
            } else {
                // TODO doesn't work on iPhone
                urvanov_syntax_highlighters[uid].expandButton.removeClass(PRESSED);
                urvanov_syntax_highlighters[uid].expandButton.addClass(UNPRESSED);
            }
        };

        var updatePlainButton = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined' || typeof urvanov_syntax_highlighters[uid].plainVisible == 'undefined') {
                return;
            }

            if (urvanov_syntax_highlighters[uid].plainVisible) {
                urvanov_syntax_highlighters[uid].plainButton.removeClass(UNPRESSED);
                urvanov_syntax_highlighters[uid].plainButton.addClass(PRESSED);
            } else {
                // TODO doesn't work on iPhone
                urvanov_syntax_highlighters[uid].plainButton.removeClass(PRESSED);
                urvanov_syntax_highlighters[uid].plainButton.addClass(UNPRESSED);
            }
        };

        var toggleToolbar = function (uid, show, animTime, hideDelay) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            } else if (!urvanov_syntax_highlighters[uid].toolbarMouseover) {
                return;
            } else if (show == false && urvanov_syntax_highlighters[uid].toolbarPreventHide) {
                return;
            } else if (touchscreen) {
                return;
            }
            var toolbar = urvanov_syntax_highlighters[uid].toolbar;

            if (typeof hideDelay == 'undefined') {
                hideDelay = urvanov_syntax_highlighters[uid].toolbar_delay;
            }

            urvanovSyntaxHighlighterSlide(uid, toolbar, show, animTime, hideDelay, function () {
                urvanov_syntax_highlighters[uid].toolbarVisible = show;
            });
        };

        var addSize = function (orig, add) {
            var copy = $.extend({}, orig);
            copy.width += add.width;
            copy.height += add.height;
            return copy;
        };

        var minusSize = function (orig, minus) {
            var copy = $.extend({}, orig);
            copy.width -= minus.width;
            copy.height -= minus.height;
            return copy;
        };

        var initSize = function (uid) {
            if (typeof urvanov_syntax_highlighters[uid].initialSize == 'undefined') {
                // Shared for scrollbars and expanding
                urvanov_syntax_highlighters[uid].toolbarHeight = urvanov_syntax_highlighters[uid].toolbar.outerHeight();
                urvanov_syntax_highlighters[uid].innerSize = {width: urvanov_syntax_highlighters[uid].width(), height: urvanov_syntax_highlighters[uid].height()};
                urvanov_syntax_highlighters[uid].outerSize = {width: urvanov_syntax_highlighters[uid].outerWidth(), height: urvanov_syntax_highlighters[uid].outerHeight()};
                urvanov_syntax_highlighters[uid].borderSize = minusSize(urvanov_syntax_highlighters[uid].outerSize, urvanov_syntax_highlighters[uid].innerSize);
                urvanov_syntax_highlighters[uid].initialSize = {width: urvanov_syntax_highlighters[uid].main.outerWidth(), height: urvanov_syntax_highlighters[uid].main.outerHeight()};
                urvanov_syntax_highlighters[uid].initialSize.height += urvanov_syntax_highlighters[uid].toolbarHeight;
                urvanov_syntax_highlighters[uid].initialOuterSize = addSize(urvanov_syntax_highlighters[uid].initialSize, urvanov_syntax_highlighters[uid].borderSize);
                urvanov_syntax_highlighters[uid].finalSize = {width: urvanov_syntax_highlighters[uid].table.outerWidth(), height: urvanov_syntax_highlighters[uid].table.outerHeight()};
                urvanov_syntax_highlighters[uid].finalSize.height += urvanov_syntax_highlighters[uid].toolbarHeight;
                // Ensure we don't shrink
                urvanov_syntax_highlighters[uid].finalSize.width = UrvanovSyntaxHighlighterUtil.setMin(urvanov_syntax_highlighters[uid].finalSize.width, urvanov_syntax_highlighters[uid].initialSize.width);
                urvanov_syntax_highlighters[uid].finalSize.height = UrvanovSyntaxHighlighterUtil.setMin(urvanov_syntax_highlighters[uid].finalSize.height, urvanov_syntax_highlighters[uid].initialSize.height);
                urvanov_syntax_highlighters[uid].diffSize = minusSize(urvanov_syntax_highlighters[uid].finalSize, urvanov_syntax_highlighters[uid].initialSize);
                urvanov_syntax_highlighters[uid].finalOuterSize = addSize(urvanov_syntax_highlighters[uid].finalSize, urvanov_syntax_highlighters[uid].borderSize);
                urvanov_syntax_highlighters[uid].initialSize.height += urvanov_syntax_highlighters[uid].toolbar.outerHeight();
            }
        };

        var toggleExpand = function (uid, expand) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }
            if (typeof expand == 'undefined') {
                return;
            }

            var main = urvanov_syntax_highlighters[uid].main;
            var plain = urvanov_syntax_highlighters[uid].plain;

            if (expand) {
                if (typeof urvanov_syntax_highlighters[uid].expanded == 'undefined') {
                    initSize(uid);
                    urvanov_syntax_highlighters[uid].expandTime = UrvanovSyntaxHighlighterUtil.setRange(urvanov_syntax_highlighters[uid].diffSize.width / 3, 300, 800);
                    urvanov_syntax_highlighters[uid].expanded = false;
                    var placeHolderSize = urvanov_syntax_highlighters[uid].finalOuterSize;
                    urvanov_syntax_highlighters[uid].placeholder = $('<div></div>');
                    urvanov_syntax_highlighters[uid].placeholder.addClass(URVANOV_SYNTAX_HIGHLIGHTER_PLACEHOLDER);
                    urvanov_syntax_highlighters[uid].placeholder.css(placeHolderSize);
                    urvanov_syntax_highlighters[uid].before(urvanov_syntax_highlighters[uid].placeholder);
                    urvanov_syntax_highlighters[uid].placeholder.css('margin', urvanov_syntax_highlighters[uid].css('margin'));
                    $(window).bind('resize', placeholderResize);
                }

                var expandHeight = {
                    'height': 'auto',
                    'min-height': 'none',
                    'max-height': 'none'
                };
                var expandWidth = {
                    'width': 'auto',
                    'min-width': 'none',
                    'max-width': 'none'
                };

                urvanov_syntax_highlighters[uid].outerWidth(urvanov_syntax_highlighters[uid].outerWidth());
                urvanov_syntax_highlighters[uid].css({
                    'min-width': 'none',
                    'max-width': 'none'
                });
                var newSize = {
                    width: urvanov_syntax_highlighters[uid].finalOuterSize.width
                };
                if (!urvanov_syntax_highlighters[uid].mainHeightAuto && !urvanov_syntax_highlighters[uid].hasOneLine) {
                    newSize.height = urvanov_syntax_highlighters[uid].finalOuterSize.height;
                    urvanov_syntax_highlighters[uid].outerHeight(urvanov_syntax_highlighters[uid].outerHeight());
                }

                main.css(expandHeight);
                main.css(expandWidth);
                urvanov_syntax_highlighters[uid].stop(true);

                urvanov_syntax_highlighters[uid].animate(newSize, animt(urvanov_syntax_highlighters[uid].expandTime, uid), function () {
                    urvanov_syntax_highlighters[uid].expanded = true;
                    updateExpandButton(uid);
                });

                urvanov_syntax_highlighters[uid].placeholder.show();
                $('body').prepend(urvanov_syntax_highlighters[uid]);
                urvanov_syntax_highlighters[uid].addClass(URVANOV_SYNTAX_HIGHLIGHTER_EXPANDED);
                placeholderResize();
            } else {
                var initialSize = urvanov_syntax_highlighters[uid].initialOuterSize;
                var delay = urvanov_syntax_highlighters[uid].toolbar_delay;
                if (initialSize) {
                    urvanov_syntax_highlighters[uid].stop(true);
                    if (!urvanov_syntax_highlighters[uid].expanded) {
                        urvanov_syntax_highlighters[uid].delay(delay);
                    }
                    var newSize = {
                        width: initialSize.width
                    };
                    if (!urvanov_syntax_highlighters[uid].mainHeightAuto && !urvanov_syntax_highlighters[uid].hasOneLine) {
                        newSize.height = initialSize.height;
                    }
                    urvanov_syntax_highlighters[uid].animate(newSize, animt(urvanov_syntax_highlighters[uid].expandTime, uid), function () {
                        expandFinish(uid);
                    });
                } else {
                    setTimeout(function () {
                       expandFinish(uid);
                    }, delay);
                }
                urvanov_syntax_highlighters[uid].placeholder.hide();
                urvanov_syntax_highlighters[uid].placeholder.before(urvanov_syntax_highlighters[uid]);
                urvanov_syntax_highlighters[uid].css({left: 'auto', top: 'auto'});
                urvanov_syntax_highlighters[uid].removeClass(URVANOV_SYNTAX_HIGHLIGHTER_EXPANDED);
            }

            reconsileDimensions(uid);
            if (expand) {
                updateWrap(uid, false);
            }
        };

        var placeholderResize = function () {
            for (uid in urvanov_syntax_highlighters) {
                if (urvanov_syntax_highlighters[uid].hasClass(URVANOV_SYNTAX_HIGHLIGHTER_EXPANDED)) {
                    urvanov_syntax_highlighters[uid].css(urvanov_syntax_highlighters[uid].placeholder.offset());
                }
            }
        };

        var expandFinish = function(uid) {
            urvanov_syntax_highlighters[uid].expanded = false;
            restoreDimensions(uid);
            updateExpandButton(uid);
            if (urvanov_syntax_highlighters[uid].wrapped) {
                updateWrap(uid);
            }
        };

        var toggle_scroll = function (uid, show, expand) {
            if (typeof urvanov_syntax_highlighters[uid] == 'undefined') {
                return makeUID(uid);
            }
            if (typeof show == 'undefined' || expand || urvanov_syntax_highlighters[uid].expanded) {
                return;
            }

            var main = urvanov_syntax_highlighters[uid].main;
            var plain = urvanov_syntax_highlighters[uid].plain;

            if (show) {
                // Show scrollbars
                main.css('overflow', 'auto');
                plain.css('overflow', 'auto');
                if (typeof urvanov_syntax_highlighters[uid].top != 'undefined') {
                    visible = (main.css('z-index') == 1 ? main : plain);
                    // Browser will not render until scrollbar moves, move it manually
                    visible.scrollTop(urvanov_syntax_highlighters[uid].top - 1);
                    visible.scrollTop(urvanov_syntax_highlighters[uid].top);
                    visible.scrollLeft(urvanov_syntax_highlighters[uid].left - 1);
                    visible.scrollLeft(urvanov_syntax_highlighters[uid].left);
                }
            } else {
                // Hide scrollbars
                visible = (main.css('z-index') == 1 ? main : plain);
                urvanov_syntax_highlighters[uid].top = visible.scrollTop();
                urvanov_syntax_highlighters[uid].left = visible.scrollLeft();
                main.css('overflow', 'hidden');
                plain.css('overflow', 'hidden');
            }
            // Register that overflow has changed
            urvanov_syntax_highlighters[uid].scrollChanged = true;
            fixScrollBlank(uid);
        };

        /* Fix weird draw error, causes blank area to appear where scrollbar once was. */
        var fixScrollBlank = function (uid) {
            // Scrollbar draw error in Chrome
            urvanov_syntax_highlighters[uid].table.style('width', '100%', 'important');
            var redraw = setTimeout(function () {
                urvanov_syntax_highlighters[uid].table.style('width', '');
                clearInterval(redraw);
            }, 10);
        };

        var restoreDimensions = function (uid) {
            // Restore dimensions
            var main = urvanov_syntax_highlighters[uid].main;
            var mainStyle = urvanov_syntax_highlighters[uid].mainStyle;
            main.css(mainStyle);
            // Width styles also apply to urvanovSyntaxHighlighter
            urvanov_syntax_highlighters[uid].css('height', 'auto');
            urvanov_syntax_highlighters[uid].css('width', mainStyle['width']);
            urvanov_syntax_highlighters[uid].css('max-width', mainStyle['max-width']);
            urvanov_syntax_highlighters[uid].css('min-width', mainStyle['min-width']);
        };

        var reconsileDimensions = function (uid) {
            // Reconsile dimensions
            urvanov_syntax_highlighters[uid].plain.outerHeight(urvanov_syntax_highlighters[uid].main.outerHeight());
        };

        var reconsileLines = function (uid) {
            $(URVANOV_SYNTAX_HIGHLIGHTER_NUM, urvanov_syntax_highlighters[uid]).each(function () {
                var lineID = $(this).attr('data-line');
                var line = $('#' + lineID);
                var height = null;
                if (urvanov_syntax_highlighters[uid].wrapped) {
                    line.css('height', '');
                    height = line.outerHeight();
                    height = height ? height : '';
                    // TODO toolbar should overlay title if needed
                } else {
                    height = line.attr('data-height');
                    height = height ? height : '';
                    line.css('height', height);
                    //line.css('height', line.css('line-height'));
                }
                $(this).css('height', height);
            });
        };

        var animt = function (x, uid) {
            if (x == 'fast') {
                x = 200;
            } else if (x == 'slow') {
                x = 600;
            } else if (!isNumber(x)) {
                x = parseInt(x);
                if (isNaN(x)) {
                    return 0;
                }
            }
            return x * urvanov_syntax_highlighters[uid].time;
        };

        var isNumber = function (x) {
            return typeof x == 'number';
        };

    };

    $(document).ready(function () {
        UrvanovSyntaxHighlighterSyntax.init();
    });
})(jQueryUrvanovSyntaxHighlighter);
(function ($) {

    var settings = UrvanovSyntaxHighlighterTagEditorSettings;

    window.urvanovSyntaxHighlighterQuickTags = new function () {

        var base = this;

        base.init = function () {
            base.sel = '*[id*="urvanov_syntax_highlighter_quicktag"],*[class*="urvanov_syntax_highlighter_quicktag"]';
            var buttonText = settings.quicktag_text;
            buttonText = buttonText !== undefined ? buttonText : 'urvanov_syntax_highlighter';
            QTags.addButton('urvanov_syntax_highlighter_quicktag', buttonText, function () {
                UrvanovSyntaxHighlighterTagEditor.showDialog({
                    insert: function (shortcode) {
                        QTags.insertContent(shortcode);
                    },
                    select: base.getSelectedText,
                    editor_str: 'html',
                    output: 'encode'
                });
                $(base.sel).removeClass('qt_urvanov_syntax_highlighter_highlight');
            });
            var qt_urvanov_syntax_highlighter;
            var find_qt_urvanov_syntax_highlighter = setInterval(function () {
                qt_urvanov_syntax_highlighter = $(base.sel).first();
                if (typeof qt_urvanov_syntax_highlighter != 'undefined') {
                    UrvanovSyntaxHighlighterTagEditor.bind(base.sel);
                    clearInterval(find_qt_urvanov_syntax_highlighter);
                }
            }, 100);
        };

        base.getSelectedText = function () {
            if (QTags.instances.length == 0) {
                return null;
            } else {
                var qt = QTags.instances[0];
                var startPos = qt.canvas.selectionStart;
                var endPos = qt.canvas.selectionEnd;
                return qt.canvas.value.substring(startPos, endPos);
            }
        };

    };

    $(document).ready(function () {
        urvanovSyntaxHighlighterQuickTags.init();
    });

})(jQueryUrvanovSyntaxHighlighter);/*!
 Colorbox v1.5.9 - 2014-04-25
 jQuery lightbox and modal window plugin
 (c) 2014 Jack Moore - http://www.jacklmoore.com/colorbox
 license: http://www.opensource.org/licenses/mit-license.php
 */
(function(t,e,i){function n(i,n,o){var r=e.createElement(i);return n&&(r.id=Z+n),o&&(r.style.cssText=o),t(r)}function o(){return i.innerHeight?i.innerHeight:t(i).height()}function r(e,i){i!==Object(i)&&(i={}),this.cache={},this.el=e,this.value=function(e){var n;return void 0===this.cache[e]&&(n=t(this.el).attr("data-cbox-"+e),void 0!==n?this.cache[e]=n:void 0!==i[e]?this.cache[e]=i[e]:void 0!==X[e]&&(this.cache[e]=X[e])),this.cache[e]},this.get=function(e){var i=this.value(e);return t.isFunction(i)?i.call(this.el,this):i}}function h(t){var e=W.length,i=(z+t)%e;return 0>i?e+i:i}function a(t,e){return Math.round((/%/.test(t)?("x"===e?E.width():o())/100:1)*parseInt(t,10))}function s(t,e){return t.get("photo")||t.get("photoRegex").test(e)}function l(t,e){return t.get("retinaUrl")&&i.devicePixelRatio>1?e.replace(t.get("photoRegex"),t.get("retinaSuffix")):e}function d(t){"contains"in x[0]&&!x[0].contains(t.target)&&t.target!==v[0]&&(t.stopPropagation(),x.focus())}function c(t){c.str!==t&&(x.add(v).removeClass(c.str).addClass(t),c.str=t)}function g(e){z=0,e&&e!==!1?(W=t("."+te).filter(function(){var i=t.data(this,Y),n=new r(this,i);return n.get("rel")===e}),z=W.index(_.el),-1===z&&(W=W.add(_.el),z=W.length-1)):W=t(_.el)}function u(i){t(e).trigger(i),ae.triggerHandler(i)}function f(i){var o;if(!G){if(o=t(i).data("colorbox"),_=new r(i,o),g(_.get("rel")),!$){$=q=!0,c(_.get("className")),x.css({visibility:"hidden",display:"block",opacity:""}),L=n(se,"LoadedContent","width:0; height:0; overflow:hidden; visibility:hidden"),b.css({width:"",height:""}).append(L),D=T.height()+k.height()+b.outerHeight(!0)-b.height(),j=C.width()+H.width()+b.outerWidth(!0)-b.width(),A=L.outerHeight(!0),N=L.outerWidth(!0);var h=a(_.get("initialWidth"),"x"),s=a(_.get("initialHeight"),"y"),l=_.get("maxWidth"),f=_.get("maxHeight");_.w=(l!==!1?Math.min(h,a(l,"x")):h)-N-j,_.h=(f!==!1?Math.min(s,a(f,"y")):s)-A-D,L.css({width:"",height:_.h}),J.position(),u(ee),_.get("onOpen"),O.add(I).hide(),x.focus(),_.get("trapFocus")&&e.addEventListener&&(e.addEventListener("focus",d,!0),ae.one(re,function(){e.removeEventListener("focus",d,!0)})),_.get("returnFocus")&&ae.one(re,function(){t(_.el).focus()})}v.css({opacity:parseFloat(_.get("opacity"))||"",cursor:_.get("overlayClose")?"pointer":"",visibility:"visible"}).show(),_.get("closeButton")?B.html(_.get("close")).appendTo(b):B.appendTo("<div/>"),w()}}function p(){!x&&e.body&&(V=!1,E=t(i),x=n(se).attr({id:Y,"class":t.support.opacity===!1?Z+"IE":"",role:"dialog",tabindex:"-1"}).hide(),v=n(se,"Overlay").hide(),S=t([n(se,"LoadingOverlay")[0],n(se,"LoadingGraphic")[0]]),y=n(se,"Wrapper"),b=n(se,"Content").append(I=n(se,"Title"),R=n(se,"Current"),P=t('<button type="button"/>').attr({id:Z+"Previous"}),K=t('<button type="button"/>').attr({id:Z+"Next"}),F=n("button","Slideshow"),S),B=t('<button type="button"/>').attr({id:Z+"Close"}),y.append(n(se).append(n(se,"TopLeft"),T=n(se,"TopCenter"),n(se,"TopRight")),n(se,!1,"clear:left").append(C=n(se,"MiddleLeft"),b,H=n(se,"MiddleRight")),n(se,!1,"clear:left").append(n(se,"BottomLeft"),k=n(se,"BottomCenter"),n(se,"BottomRight"))).find("div div").css({"float":"left"}),M=n(se,!1,"position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;"),O=K.add(P).add(R).add(F),t(e.body).append(v,x.append(y,M)))}function m(){function i(t){t.which>1||t.shiftKey||t.altKey||t.metaKey||t.ctrlKey||(t.preventDefault(),f(this))}return x?(V||(V=!0,K.click(function(){J.next()}),P.click(function(){J.prev()}),B.click(function(){J.close()}),v.click(function(){_.get("overlayClose")&&J.close()}),t(e).bind("keydown."+Z,function(t){var e=t.keyCode;$&&_.get("escKey")&&27===e&&(t.preventDefault(),J.close()),$&&_.get("arrowKey")&&W[1]&&!t.altKey&&(37===e?(t.preventDefault(),P.click()):39===e&&(t.preventDefault(),K.click()))}),t.isFunction(t.fn.on)?t(e).on("click."+Z,"."+te,i):t("."+te).live("click."+Z,i)),!0):!1}function w(){var e,o,r,h=J.prep,d=++le;if(q=!0,U=!1,u(he),u(ie),_.get("onLoad"),_.h=_.get("height")?a(_.get("height"),"y")-A-D:_.get("innerHeight")&&a(_.get("innerHeight"),"y"),_.w=_.get("width")?a(_.get("width"),"x")-N-j:_.get("innerWidth")&&a(_.get("innerWidth"),"x"),_.mw=_.w,_.mh=_.h,_.get("maxWidth")&&(_.mw=a(_.get("maxWidth"),"x")-N-j,_.mw=_.w&&_.w<_.mw?_.w:_.mw),_.get("maxHeight")&&(_.mh=a(_.get("maxHeight"),"y")-A-D,_.mh=_.h&&_.h<_.mh?_.h:_.mh),e=_.get("href"),Q=setTimeout(function(){S.show()},100),_.get("inline")){var c=t(e);r=t("<div>").hide().insertBefore(c),ae.one(he,function(){r.replaceWith(c)}),h(c)}else _.get("iframe")?h(" "):_.get("html")?h(_.get("html")):s(_,e)?(e=l(_,e),U=new Image,t(U).addClass(Z+"Photo").bind("error",function(){h(n(se,"Error").html(_.get("imgError")))}).one("load",function(){d===le&&setTimeout(function(){var e;t.each(["alt","longdesc","aria-describedby"],function(e,i){var n=t(_.el).attr(i)||t(_.el).attr("data-"+i);n&&U.setAttribute(i,n)}),_.get("retinaImage")&&i.devicePixelRatio>1&&(U.height=U.height/i.devicePixelRatio,U.width=U.width/i.devicePixelRatio),_.get("scalePhotos")&&(o=function(){U.height-=U.height*e,U.width-=U.width*e},_.mw&&U.width>_.mw&&(e=(U.width-_.mw)/U.width,o()),_.mh&&U.height>_.mh&&(e=(U.height-_.mh)/U.height,o())),_.h&&(U.style.marginTop=Math.max(_.mh-U.height,0)/2+"px"),W[1]&&(_.get("loop")||W[z+1])&&(U.style.cursor="pointer",U.onclick=function(){J.next()}),U.style.width=U.width+"px",U.style.height=U.height+"px",h(U)},1)}),U.src=e):e&&M.load(e,_.get("data"),function(e,i){d===le&&h("error"===i?n(se,"Error").html(_.get("xhrError")):t(this).contents())})}var v,x,y,b,T,C,H,k,W,E,L,M,S,I,R,F,K,P,B,O,_,D,j,A,N,z,U,$,q,G,Q,J,V,X={html:!1,photo:!1,iframe:!1,inline:!1,transition:"elastic",speed:300,fadeOut:300,width:!1,initialWidth:"600",innerWidth:!1,maxWidth:!1,height:!1,initialHeight:"450",innerHeight:!1,maxHeight:!1,scalePhotos:!0,scrolling:!0,opacity:.9,preloading:!0,className:!1,overlayClose:!0,escKey:!0,arrowKey:!0,top:!1,bottom:!1,left:!1,right:!1,fixed:!1,data:void 0,closeButton:!0,fastIframe:!0,open:!1,reposition:!0,loop:!0,slideshow:!1,slideshowAuto:!0,slideshowSpeed:2500,slideshowStart:"start slideshow",slideshowStop:"stop slideshow",photoRegex:/\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\?).*)?$/i,retinaImage:!1,retinaUrl:!1,retinaSuffix:"@2x.$1",current:"image {current} of {total}",previous:"previous",next:"next",close:"close",xhrError:"This content failed to load.",imgError:"This image failed to load.",returnFocus:!0,trapFocus:!0,onOpen:!1,onLoad:!1,onComplete:!1,onCleanup:!1,onClosed:!1,rel:function(){return this.rel},href:function(){return t(this).attr("href")},title:function(){return this.title}},Y="colorbox",Z="cbox",te=Z+"Element",ee=Z+"_open",ie=Z+"_load",ne=Z+"_complete",oe=Z+"_cleanup",re=Z+"_closed",he=Z+"_purge",ae=t("<a/>"),se="div",le=0,de={},ce=function(){function t(){clearTimeout(h)}function e(){(_.get("loop")||W[z+1])&&(t(),h=setTimeout(J.next,_.get("slideshowSpeed")))}function i(){F.html(_.get("slideshowStop")).unbind(s).one(s,n),ae.bind(ne,e).bind(ie,t),x.removeClass(a+"off").addClass(a+"on")}function n(){t(),ae.unbind(ne,e).unbind(ie,t),F.html(_.get("slideshowStart")).unbind(s).one(s,function(){J.next(),i()}),x.removeClass(a+"on").addClass(a+"off")}function o(){r=!1,F.hide(),t(),ae.unbind(ne,e).unbind(ie,t),x.removeClass(a+"off "+a+"on")}var r,h,a=Z+"Slideshow_",s="click."+Z;return function(){r?_.get("slideshow")||(ae.unbind(oe,o),o()):_.get("slideshow")&&W[1]&&(r=!0,ae.one(oe,o),_.get("slideshowAuto")?i():n(),F.show())}}();t.colorbox||(t(p),J=t.fn[Y]=t[Y]=function(e,i){var n,o=this;if(e=e||{},t.isFunction(o))o=t("<a/>"),e.open=!0;else if(!o[0])return o;return o[0]?(p(),m()&&(i&&(e.onComplete=i),o.each(function(){var i=t.data(this,Y)||{};t.data(this,Y,t.extend(i,e))}).addClass(te),n=new r(o[0],e),n.get("open")&&f(o[0])),o):o},J.position=function(e,i){function n(){T[0].style.width=k[0].style.width=b[0].style.width=parseInt(x[0].style.width,10)-j+"px",b[0].style.height=C[0].style.height=H[0].style.height=parseInt(x[0].style.height,10)-D+"px"}var r,h,s,l=0,d=0,c=x.offset();if(E.unbind("resize."+Z),x.css({top:-9e4,left:-9e4}),h=E.scrollTop(),s=E.scrollLeft(),_.get("fixed")?(c.top-=h,c.left-=s,x.css({position:"fixed"})):(l=h,d=s,x.css({position:"absolute"})),d+=_.get("right")!==!1?Math.max(E.width()-_.w-N-j-a(_.get("right"),"x"),0):_.get("left")!==!1?a(_.get("left"),"x"):Math.round(Math.max(E.width()-_.w-N-j,0)/2),l+=_.get("bottom")!==!1?Math.max(o()-_.h-A-D-a(_.get("bottom"),"y"),0):_.get("top")!==!1?a(_.get("top"),"y"):Math.round(Math.max(o()-_.h-A-D,0)/2),x.css({top:c.top,left:c.left,visibility:"visible"}),y[0].style.width=y[0].style.height="9999px",r={width:_.w+N+j,height:_.h+A+D,top:l,left:d},e){var g=0;t.each(r,function(t){return r[t]!==de[t]?(g=e,void 0):void 0}),e=g}de=r,e||x.css(r),x.dequeue().animate(r,{duration:e||0,complete:function(){n(),q=!1,y[0].style.width=_.w+N+j+"px",y[0].style.height=_.h+A+D+"px",_.get("reposition")&&setTimeout(function(){E.bind("resize."+Z,J.position)},1),i&&i()},step:n})},J.resize=function(t){var e;$&&(t=t||{},t.width&&(_.w=a(t.width,"x")-N-j),t.innerWidth&&(_.w=a(t.innerWidth,"x")),L.css({width:_.w}),t.height&&(_.h=a(t.height,"y")-A-D),t.innerHeight&&(_.h=a(t.innerHeight,"y")),t.innerHeight||t.height||(e=L.scrollTop(),L.css({height:"auto"}),_.h=L.height()),L.css({height:_.h}),e&&L.scrollTop(e),J.position("none"===_.get("transition")?0:_.get("speed")))},J.prep=function(i){function o(){return _.w=_.w||L.width(),_.w=_.mw&&_.mw<_.w?_.mw:_.w,_.w}function a(){return _.h=_.h||L.height(),_.h=_.mh&&_.mh<_.h?_.mh:_.h,_.h}if($){var d,g="none"===_.get("transition")?0:_.get("speed");L.remove(),L=n(se,"LoadedContent").append(i),L.hide().appendTo(M.show()).css({width:o(),overflow:_.get("scrolling")?"auto":"hidden"}).css({height:a()}).prependTo(b),M.hide(),t(U).css({"float":"none"}),c(_.get("className")),d=function(){function i(){t.support.opacity===!1&&x[0].style.removeAttribute("filter")}var n,o,a=W.length;$&&(o=function(){clearTimeout(Q),S.hide(),u(ne),_.get("onComplete")},I.html(_.get("title")).show(),L.show(),a>1?("string"==typeof _.get("current")&&R.html(_.get("current").replace("{current}",z+1).replace("{total}",a)).show(),K[_.get("loop")||a-1>z?"show":"hide"]().html(_.get("next")),P[_.get("loop")||z?"show":"hide"]().html(_.get("previous")),ce(),_.get("preloading")&&t.each([h(-1),h(1)],function(){var i,n=W[this],o=new r(n,t.data(n,Y)),h=o.get("href");h&&s(o,h)&&(h=l(o,h),i=e.createElement("img"),i.src=h)})):O.hide(),_.get("iframe")?(n=e.createElement("iframe"),"frameBorder"in n&&(n.frameBorder=0),"allowTransparency"in n&&(n.allowTransparency="true"),_.get("scrolling")||(n.scrolling="no"),t(n).attr({src:_.get("href"),name:(new Date).getTime(),"class":Z+"Iframe",allowFullScreen:!0}).one("load",o).appendTo(L),ae.one(he,function(){n.src="//about:blank"}),_.get("fastIframe")&&t(n).trigger("load")):o(),"fade"===_.get("transition")?x.fadeTo(g,1,i):i())},"fade"===_.get("transition")?x.fadeTo(g,0,function(){J.position(0,d)}):J.position(g,d)}},J.next=function(){!q&&W[1]&&(_.get("loop")||W[z+1])&&(z=h(1),f(W[z]))},J.prev=function(){!q&&W[1]&&(_.get("loop")||z)&&(z=h(-1),f(W[z]))},J.close=function(){$&&!G&&(G=!0,$=!1,u(oe),_.get("onCleanup"),E.unbind("."+Z),v.fadeTo(_.get("fadeOut")||0,0),x.stop().fadeTo(_.get("fadeOut")||0,0,function(){x.hide(),v.hide(),u(he),L.remove(),setTimeout(function(){G=!1,u(re),_.get("onClosed")},1)}))},J.remove=function(){x&&(x.stop(),t.colorbox.close(),x.stop().remove(),v.remove(),G=!1,x=null,t("."+te).removeData(Y).removeClass(te),t(e).unbind("click."+Z))},J.element=function(){return t(_.el)},J.settings=X)})(jQuery,document,window);(function ($, wp) {
    var CRAYON_INLINE_CSS = 'crayon-inline';
    
    var el = wp.element.createElement,
    registerBlockType = wp.blocks.registerBlockType,
    blockStyle = {  };
    
    registerBlockType( 'urvanov-syntax-highlighter/code-block', {
        title: 'Urvanov Syntax Highlighter',

        icon: 'editor-code',

        category: 'formatting',
        attributes: {
            content: {
                type: 'string',
                source: 'html',
                selector: 'div',
            }
        },
        edit: function( props ) {
            var content = props.attributes.content;
            function onChangeContent( newContent ) {
                props.setAttributes( { content: newContent } );
            }

            return el(
                wp.element.Fragment,
                null,
                el(
                    wp.editor.BlockControls,
                    null,
                    el(
                        wp.components.Toolbar,
                        null,
                        el(
                            wp.components.IconButton,
                            {
                                icon: 'editor-code',
                                title: 'UrvanovSyntaxHighlighter',
                                onClick: function() {
                                     window.UrvanovSyntaxHighlighterTagEditor.showDialog({
                                         update: function(shortcode) {
                                        },
                                        br_html_block_after : '',
                                        input: 'decode',
                                        output: 'encode',
                                        node:  content ? UrvanovSyntaxHighlighterUtil.htmlToElements(content)[0] : null,
                                         insert: function(shortcode) {
                                                         onChangeContent(
                                                             shortcode
                                                         )
                                                     
                                
                                         }
                                    });

                                   }
                            },
                            "UrvanovSyntaxHighlighter"
                        )
                    )
                ),
                el( 'div', { style: blockStyle, dangerouslySetInnerHTML: {__html: props.attributes.content == null ? '10 REM Your code will be here<br>20 PRINT "HELLO, WORLD!"' : props.attributes.content} })//, props.attributes.content )
            );
        },

        save: function( props ) {
            var content = props.attributes.content;
            return el('div', { dangerouslySetInnerHTML : {__html : content} });
        },
    } );

    var UrvanovSyntaxHighlighterButton = function( props ) {
        return wp.element.createElement(
            wp.editor.RichTextToolbarButton, {
                icon: 'editor-code',
                title: 'UrvanovSyntaxHighlighter',
                onClick: function(onClickArg) {
                    var activeFormat = wp.richText.getActiveFormat(props.value, 'urvanov-syntax-highlighter/code-inline');
                    var startIndex = props.value.start;
                    var endIndex = props.value.end;
                    
                    if (activeFormat) {
                        var format = 'urvanov-syntax-highlighter/code-inline';
                        while ( props.value.formats[startIndex] && props.value.formats[ startIndex ].find(function(el) {return el.type == format;} )) {
                            startIndex--;
                        }
                            startIndex++;
                    
                        endIndex++;
                    
                        while (props.value.formats[endIndex] &&  props.value.formats[ endIndex ].find(function(el) {return el.type == format;} ) ) {
                            endIndex++;
                        }
                        var inputRichTextValue = wp.richText.slice(props.value, startIndex, endIndex);
                        var inputValue = wp.richText.toHTMLString({
                            value: inputRichTextValue});
                        var inputNode = UrvanovSyntaxHighlighterUtil.htmlToElements(inputValue)[0];
                    } else {
                    	var inputRichTextValue = wp.richText.slice(props.value, startIndex, endIndex);
                        var inputValue = '<span class="' + CRAYON_INLINE_CSS + '">' + wp.richText.toHTMLString({
                            value: inputRichTextValue}) + '</span>';
                        var inputNode = UrvanovSyntaxHighlighterUtil.htmlToElements(inputValue)[0];
                    }
                    

                     window.UrvanovSyntaxHighlighterTagEditor.showDialog({
                         update: function(shortcode) {
                        },
                        node:  inputNode,
                        input: 'decode',
                        output: 'encode',
                        insert: function(shortcode) {
                             props.onChange(
                               
                    
                                 wp.richText.insert(
                                props.value,
                                wp.richText.create({
                                    html:shortcode
                                }),
                                startIndex,
                                endIndex
                             )
                         );
                    
                         }
                    });
                },
                isActive: props.isActive
            }
        );
    }
    
    wp.richText.registerFormatType(
        'urvanov-syntax-highlighter/code-inline', {
            title: 'UrvanovSyntaxHighlighter',
            tagName: 'span',
            className: CRAYON_INLINE_CSS,
            edit: UrvanovSyntaxHighlighterButton
        }
    );

    window.UrvanovSyntaxHighlighterTagEditor = new function () {
        var base = this;

        var isInit = false;
        var loaded = false;
        var editing = false;
        var insertCallback, editCallback, showCallback, hideCallback, selectCallback;
        // Used for encoding, decoding
        var inputHTML, outputHTML, editor_name, ajax_class_timer;
        var ajax_class_timer_count = 0;

        var code_refresh, url_refresh;

        // Current $ obj of pre node
        var currUrvanovSyntaxHighlighter = null;
        // Classes from pre node, excl. settings
        var currClasses = '';
        // Whether to make span or pre
        var is_inline = false;

        // Generated in WP and contains the settings
        var s, gs, util;

        // CSS
        var dialog, code, clear, submit, cancel;
        
        var br_html_block_after;

        var colorboxSettings = {
            inline: true,
            width: 690,
            height: '90%',
            closeButton: false,
            fixed: true,
            transition: 'none',
            className: 'urvanov-syntax-highlighter-colorbox',
            onOpen: function () {
                $(this.outer).prepend($(s.bar_content));
            },
            onComplete: function () {
                $(s.code_css).focus();
            },
            onCleanup: function () {
                $(s.bar).prepend($(s.bar_content));
            }
        };

        base.init = function () {
            s = UrvanovSyntaxHighlighterTagEditorSettings;
            gs = UrvanovSyntaxHighlighterSyntaxSettings;
            util = UrvanovSyntaxHighlighterUtil;
            // This allows us to call $.colorbox and reload without needing a button click.
            colorboxSettings.href = s.content_css;
        };

        base.bind = function (buttonCls) {
            if (!isInit) {
                isInit = true;
                base.init();
            }
            var $buttons = $(buttonCls);
            $buttons.each(function (i, button) {
                var $button = $(button);
                var $wrapper = $('<a class="urvanov-syntax-highlighter-tag-editor-button-wrapper"></a>').attr('href', s.content_css);
                $button.after($wrapper);
                $wrapper.append($button);
                $wrapper.colorbox(colorboxSettings);
            });
        };

        base.hide = function () {
            $.colorbox.close();
            return false;
        };

        // XXX Loads dialog contents
        base.loadDialog = function (callback) {
            // Loaded once url is given
            if (!loaded) {
                loaded = true;
            } else {
                callback && callback();
                return;
            }
            // Load the editor content
            UrvanovSyntaxHighlighterUtil.getAJAX({action: 'urvanov-syntax-highlighter-tag-editor', is_admin: gs.is_admin}, function (data) {
                dialog = $('<div id="' + s.css + '"></div>');
                dialog.appendTo('body').hide();
                dialog.html(data);

                base.setOrigValues();

                submit = dialog.find(s.submit_css);
                cancel = dialog.find(s.cancel_css);

                code = $(s.code_css);
                clear = $('#urvanov-syntax-highlighter-te-clear');
                code_refresh = function () {
                    var clear_visible = clear.is(":visible");
                    if (code.val().length > 0 && !clear_visible) {
                        clear.show();
                        code.removeClass(gs.selected);
                    } else if (code.val().length <= 0) {
                        clear.hide();
                    }
                };

                code.keyup(code_refresh);
                code.change(code_refresh);
                clear.click(function () {
                    code.val('');
                    code.removeClass(gs.selected);
                    code.focus();
                });

                var url = $(s.url_css);
                var url_info = $(s.url_info_css);
                var exts = UrvanovSyntaxHighlighterTagEditorSettings.extensions;
                url_refresh = function () {
                    if (url.val().length > 0 && !url_info.is(":visible")) {
                        url_info.show();
                        url.removeClass(gs.selected);
                    } else if (url.val().length <= 0) {
                        url_info.hide();
                    }

                    // Check for extensions and select language automatically
                    var ext = UrvanovSyntaxHighlighterUtil.getExt(url.val());
                    if (ext) {
                        var lang = exts[ext];
                        // Otherwise use the extention as the lang
                        var lang_id = lang ? lang : ext;
                        var final_lang = UrvanovSyntaxHighlighterTagEditorSettings.fallback_lang;
                        $(s.lang_css + ' option').each(function () {
                            if ($(this).val() == lang_id) {
                                final_lang = lang_id;
                            }
                        });
                        $(s.lang_css).val(final_lang);
                    }
                };
                url.keyup(url_refresh);
                url.change(url_refresh);

                var setting_change = function () {
                    var setting = $(this);
                    var orig_value = $(this).attr(gs.orig_value);
                    if (typeof orig_value == 'undefined') {
                        orig_value = '';
                    }
                    // Depends on type
                    var value = base.settingValue(setting);
                    UrvanovSyntaxHighlighterUtil.log(setting.attr('id') + ' value: ' + value);
                    var highlight = null;
                    if (setting.is('input[type=checkbox]')) {
                        highlight = setting.next('span');
                    }

                    UrvanovSyntaxHighlighterUtil.log('   >>> ' + setting.attr('id') + ' is ' + orig_value + ' = ' + value);
                    if (orig_value == value) {
                        // No change
                        setting.removeClass(gs.changed);
                        if (highlight) {
                            highlight.removeClass(gs.changed);
                        }
                    } else {
                        // Changed
                        setting.addClass(gs.changed);
                        if (highlight) {
                            highlight.addClass(gs.changed);
                        }
                    }
                    // Save standardized value for later
                    base.settingValue(setting, value);
                };
                $('.' + gs.setting + '[id]:not(.' + gs.special + ')').each(function () {
                    $(this).change(setting_change);
                    $(this).keyup(setting_change);
                });
                callback && callback();
            });
        };

        // XXX Displays the dialog.
        base.showDialog = function (args) {
            var wasLoaded = loaded;
            base.loadDialog(function () {
                //if (!wasLoaded) {
                    // Forcefully load the colorbox. Otherwise it populates the content after opening the window and
                    // never renders.
                    $.colorbox(colorboxSettings);
                //}
                base._showDialog(args);
            });
        };

        base._showDialog = function (args) {
            args = $.extend({
                insert: null,
                edit: null,
                show: null,
                hide: base.hide,
                select: null,
                editor_str: null,
                ed: null,
                node: null,
                input: null,
                output: null,
                br_html_block_after: '<p>&nbsp;</p>',
            }, args);

            // Need to reset all settings back to original, clear yellow highlighting
            base.resetSettings();
            // Save these for when we add a UrvanovSyntaxHighlighter
            insertCallback = args.insert;
            editCallback = args.edit;
            showCallback = args.show;
            hideCallback = args.hide;
            selectCallback = args.select;
            inputHTML = args.input;
            outputHTML = args.output;
            editor_name = args.editor_str;
            br_html_block_after = args.br_html_block_after;
            var currNode = args.node;
            var currNode = args.node;
            is_inline = false;

            // Unbind submit
            submit.unbind();
            submit.click(function (e) {
                base.submitButton();
                e.preventDefault();
            });
            base.setSubmitText(s.submit_add);

            cancel.unbind();
            cancel.click(function (e) {
                base.hide();
                e.preventDefault();
            });

            if (base.isUrvanovSyntaxHighlighter(currNode)) {
                currUrvanovSyntaxHighlighter = $(currNode);
                if (currUrvanovSyntaxHighlighter.length != 0) {
                    // Read back settings for editing
                    currClasses = currUrvanovSyntaxHighlighter.attr('class');
                    var re = new RegExp('\\b([A-Za-z-]+)' + s.attr_sep + '(\\S+)', 'gim');
                    var matches = re.execAll(currClasses);
                    // Retain all other classes, remove settings
                    currClasses = $.trim(currClasses.replace(re, ''));
                    var atts = {};
                    for (var i in matches) {
                        var id = matches[i][1];
                        var value = matches[i][2];
                        atts[id] = value;
                    }

                    // Title
                    var title = currUrvanovSyntaxHighlighter.attr('title');
                    if (title) {
                        atts['title'] = title;
                    }

                    // URL
                    var url = currUrvanovSyntaxHighlighter.attr('data-url');
                    if (url) {
                        atts['url'] = url;
                    }

                    // Inverted settings
                    if (typeof atts['highlight'] != 'undefined') {
                        atts['highlight'] = '0' ? '1' : '0';
                    }

                    // Inline
                    is_inline = currUrvanovSyntaxHighlighter.hasClass(CRAYON_INLINE_CSS);
                    atts['inline'] = is_inline ? '1' : '0';

                    // Ensure language goes to fallback if invalid
                    var avail_langs = [];
                    $(s.lang_css + ' option').each(function () {
                        var value = $(this).val();
                        if (value) {
                            avail_langs.push(value);
                        }
                    });
                    if ($.inArray(atts['lang'], avail_langs) == -1) {
                        atts['lang'] = s.fallback_lang;
                    }

                    // Validate the attributes
                    atts = base.validate(atts);

                    // Load in attributes, add prefix
                    for (var att in atts) {
                        var setting = $('#' + gs.prefix + att + '.' + gs.setting);
                        var value = atts[att];
                        base.settingValue(setting, value);
                        // Update highlights
                        setting.change();
                        // If global setting changes and we access settings, it should declare loaded settings as changed even if they equal the global value, just so they aren't lost on save
                        if (!setting.hasClass(gs.special)) {
                            setting.addClass(gs.changed);
                            if (setting.is('input[type=checkbox]')) {
                                highlight = setting.next('span');
                                highlight.addClass(gs.changed);
                            }
                        }
                        UrvanovSyntaxHighlighterUtil.log('loaded: ' + att + ':' + value);
                    }

                    editing = true;
                    base.setSubmitText(s.submit_edit);

                    // Code
                    var content = currUrvanovSyntaxHighlighter.html();
                    if (inputHTML == 'encode') {
                        content = UrvanovSyntaxHighlighterUtil.encode_html(content);
                    } else if (inputHTML == 'decode') {
                        content = UrvanovSyntaxHighlighterUtil.decode_html(content);
                    }
                    code.val(content);

                } else {
                    UrvanovSyntaxHighlighterUtil.log('cannot load currNode of type pre');
                }
            } else {
                if (selectCallback) {
                    // Add selected content as code
                    code.val(selectCallback);
                }
                // We are creating a new UrvanovSyntaxHighlighter, not editing
                editing = false;
                base.setSubmitText(s.submit_add);
                currUrvanovSyntaxHighlighter = null;
                currClasses = '';
            }

            // Inline
            var inline = $('#' + s.inline_css);
            inline.change(function () {
                is_inline = $(this).is(':checked');
                var inline_hide = $('.' + s.inline_hide_css);
                var inline_single = $('.' + s.inline_hide_only_css);
                var disabled = [s.mark_css, s.range_css, s.title_css, s.url_css];

                for (var i in disabled) {
                    var obj = $(disabled[i]);
                    obj.attr('disabled', is_inline);
                }

                if (is_inline) {
                    inline_hide.hide();
                    inline_single.hide();
                    inline_hide.closest('tr').hide();
                    for (var i in disabled) {
                        var obj = $(disabled[i]);
                        obj.addClass('urvanov-syntax-highlighter-disabled');
                    }
                } else {
                    inline_hide.show();
                    inline_single.show();
                    inline_hide.closest('tr').show();
                    for (var i in disabled) {
                        var obj = $(disabled[i]);
                        obj.removeClass('urvanov-syntax-highlighter-disabled');
                    }
                }
            });
            inline.change();

            // Show the dialog
            var dialog_title = editing ? s.edit_text : s.add_text;
            $(s.dialog_title_css).html(dialog_title);
            if (showCallback) {
                showCallback();
            }

            code.focus();
            code_refresh();
            url_refresh();
            if (ajax_class_timer) {
                clearInterval(ajax_class_timer);
                ajax_class_timer_count = 0;
            }

            var ajax_window = $('#TB_window');
            ajax_window.hide();
            var fallback = function () {
                ajax_window.show();
                // Prevent draw artifacts
                var oldScroll = $(window).scrollTop();
                $(window).scrollTop(oldScroll + 10);
                $(window).scrollTop(oldScroll - 10);
            };

            ajax_class_timer = setInterval(function () {
                if (typeof ajax_window != 'undefined' && !ajax_window.hasClass('urvanov-syntax-highlighter-te-ajax')) {
                    ajax_window.addClass('urvanov-syntax-highlighter-te-ajax');
                    clearInterval(ajax_class_timer);
                    fallback();
                }
                if (ajax_class_timer_count >= 100) {
                    // In case it never loads, terminate
                    clearInterval(ajax_class_timer);
                    fallback();
                }
                ajax_class_timer_count++;
            }, 40);
        };

        // XXX Add UrvanovSyntaxHighlighter to editor
        base.addUrvanovSyntaxHighlighter = function () {
            var url = $(s.url_css);
            if (url.val().length == 0 && code.val().length == 0) {
                code.addClass(gs.selected);
                code.focus();
                return false;
            }
            code.removeClass(gs.selected);

            // Add inline for matching with CSS
            var inline = $('#' + s.inline_css);
            is_inline = inline.length != 0 && inline.is(':checked');

            // Spacing only for <pre>
            var br_before = br_after = '';
            if (!editing) {
                // Don't add spaces if editing
                if (!is_inline) {
                    if (editor_name == 'html') {
                        br_after = br_before = ' \n';
                    } else {
                        br_after = br_html_block_after;
                    }
                } else {
                    // Add a space after
                    if (editor_name == 'html') {
                        br_after = br_before = ' ';
                    } else {
                        br_after = '&nbsp;';
                    }
                }
            }

            var tag = (is_inline ? 'span' : 'pre');
            var shortcode = br_before + '<' + tag + ' ';

            var atts = {};
            shortcode += 'class="';

            var inline_re = new RegExp('\\b' + CRAYON_INLINE_CSS + '\\b', 'gim');
            if (is_inline) {
                // If don't have inline class, add it
                if (inline_re.exec(currClasses) == null) {
                    currClasses += ' ' + CRAYON_INLINE_CSS + ' ';
                }
            } else {
                // Remove inline css if it exists
                currClasses = currClasses.replace(inline_re, '');
            }

            // Grab settings as attributes
            $('.' + gs.changed + '[id],.' + gs.changed + '[' + s.data_value + ']').each(function () {
                var id = $(this).attr('id');
                var value = $(this).attr(s.data_value);
                // Remove prefix
                id = util.removePrefixFromID(id);
                atts[id] = value;
            });

            // Settings
            atts['lang'] = $(s.lang_css).val();
            var mark = $(s.mark_css).val();
            if (mark.length != 0 && !is_inline) {
                atts['mark'] = mark;
            }
            var range = $(s.range_css).val();
            if (range.length != 0 && !is_inline) {
                atts['range'] = range;
            }

            // XXX Code highlighting, checked means 0!
            if ($(s.hl_css).is(':checked')) {
                atts['highlight'] = '0';
            }

            // XXX Very important when working with editor
            atts['decode'] = 'true';

            // Validate the attributes
            atts = base.validate(atts);

            for (var id in atts) {
                // Remove prefix, if exists
                var value = atts[id];
                UrvanovSyntaxHighlighterUtil.log('add ' + id + ':' + value);
                shortcode += id + s.attr_sep + value + ' ';
            }

            // Add classes
            shortcode += currClasses;
            // Don't forget to close quote for class
            shortcode += '" ';

            if (!is_inline) {
                // Title
                var title = $(s.title_css).val();
                if (title.length != 0) {
                    shortcode += 'title="' + title + '" ';
                }
                // URL
                var url = $(s.url_css).val();
                if (url.length != 0) {
                    shortcode += 'data-url="' + url + '" ';
                }
            }

            var content = $(s.code_css).val();
            if (outputHTML == 'encode') {
                content = UrvanovSyntaxHighlighterUtil.encode_html(content);
            } else if (outputHTML == 'decode') {
                content = UrvanovSyntaxHighlighterUtil.decode_html(content);
            }
            content = typeof content != 'undefined' ? content : '';
            shortcode += '>' + content + '</' + tag + '>' + br_after;

            if (editing && editCallback) {
                // Edit the current selected node
                editCallback(shortcode);
            } else if (insertCallback) {
                // Insert the tag and hide dialog
                insertCallback(shortcode);
            }

            return true;
        };

        base.submitButton = function () {
            UrvanovSyntaxHighlighterUtil.log('submit');
            if (base.addUrvanovSyntaxHighlighter() != false) {
                base.hideDialog();
            }
        };

        base.hideDialog = function () {
            UrvanovSyntaxHighlighterUtil.log('hide');
            if (hideCallback) {
                hideCallback();
            }
        };

        // XXX Auxiliary methods

        base.setOrigValues = function () {
            $('.' + gs.setting + '[id]').each(function () {
                var setting = $(this);
                setting.attr(gs.orig_value, base.settingValue(setting));
            });
        };

        base.resetSettings = function () {
            UrvanovSyntaxHighlighterUtil.log('reset');
            $('.' + gs.setting).each(function () {
                var setting = $(this);
                base.settingValue(setting, setting.attr(gs.orig_value));
                // Update highlights
                setting.change();
            });
            code.val('');
        };

        base.settingValue = function (setting, value) {
            if (typeof value == 'undefined') {
                // getter
                value = '';
                if (setting.is('input[type=checkbox]')) {
                    // Boolean is stored as string
                    value = setting.is(':checked') ? 'true' : 'false';
                } else {
                    value = setting.val();
                }
                return value;
            } else {
                // setter
                if (setting.is('input[type=checkbox]')) {
                    if (typeof value == 'string') {
                        if (value == 'true' || value == '1') {
                            value = true;
                        } else if (value == 'false' || value == '0') {
                            value = false;
                        }
                    }
                    setting.prop('checked', value);
                } else {
                    setting.val(value);
                }
                setting.attr(s.data_value, value);
            }
        };

        base.validate = function (atts) {
            var fields = ['range', 'mark'];
            for (var i in fields) {
                var field = fields[i];
                if (typeof atts[field] != 'undefined') {
                    atts[field] = atts[field].replace(/\s/g, '');
                }
            }
            return atts;
        };

        base.isUrvanovSyntaxHighlighter = function (node) {
            return node != null &&
                (node.nodeName == 'PRE' || (node.nodeName == 'SPAN' && $(node).hasClass(CRAYON_INLINE_CSS)));
        };

        base.elemValue = function (obj) {
            var value = null;
            if (obj.is('input[type=checkbox]')) {
                value = obj.is(':checked');
            } else {
                value = obj.val();
            }
            return value;
        };

        base.setSubmitText = function (text) {
            submit.html(text);
        };

    };
})(jQueryUrvanovSyntaxHighlighter, wp);
